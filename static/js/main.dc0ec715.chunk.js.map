{"version":3,"sources":["components/currentWeather.js","components/dailyForecast.js","components/notLocated.js","pages/weather.js","App.js","serviceWorker.js","index.js"],"names":["CurrentWeather","props","weather","className","style","fontSize","color","lat","lon","id","src","icon","alt","current","temp","description","uvi","pressure","humidity","visibility","wind_speed","defaultProps","DayForecast","time","rain","NotLocated","Weather","useState","currentWeather","setcurrentWeather","hourly","setHourly","daily","setDaily","isLocated","setLocated","long","a","fetch","process","data","json","res","useEffect","navigator","geolocation","getCurrentPosition","position","getCurrentPositionWeather","coords","latitude","longitude","console","log","optionsCursorTrueWithMargin","followCursor","shiftX","shiftY","dataset","push","type","label","currentTime","Date","i","length","setHours","getHours","pop","width","height","chartType","options","series","0","axis","1","axes","y","Temps","Daylight","rootProps","hourlyChart","forecasts","date","dayForecast","JSON","stringify","substring","setDate","getDate","shift","renderForecast","App","Boolean","window","location","hostname","match","require","config","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.dc0ec715.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport './currentWeather.css'\r\n\r\nCurrentWeather.propTypes = {\r\n    weather: PropTypes.object\r\n}\r\n\r\nCurrentWeather.defaultProps = {\r\n    weather: {}\r\n}\r\n\r\nfunction CurrentWeather(props) {\r\n    const {weather} = props;\r\n\r\n    return(\r\n        <div className=\"current-component\">\r\n            <div className=\"current left\">\r\n                <p> <i className=\"fa fa-location-arrow\" style={{fontSize:\"30px\", color:\"red\" }}></i> (latitude, longitude): ({weather.lat}, {weather.lon}) </p>\r\n                <p> \r\n                    <img id=\"weather-icon\" src={\"http://openweathermap.org/img/w/\" + weather.weather.icon + \".png\"}  alt=\"weather-icon\" />\r\n                    <span> <span id=\"temperature\">{weather.current.temp}</span> degree </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"current middle\">\r\n                <p> {weather.weather.description} </p>\r\n                <p> UV index: {weather.current.uvi} </p>\r\n                <p> Pressure: {weather.current.pressure} </p>\r\n            </div>\r\n            <div className=\"current-right\">\r\n                <p> Humidity: {weather.current.humidity} %</p>\r\n                <p> Visibility: {weather.current.visibility} meters</p>\r\n                <p> Wind Speed: {weather.current.wind_speed}</p>\r\n            </div>  \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CurrentWeather;","import React from 'react'\r\nimport './dailyForecast.css'\r\n\r\nfunction DayForecast({weather, time}) {\r\n    return(\r\n        <div className=\"day-forecast\">\r\n            <p> UV index: {weather.uvi} </p>\r\n            <p> Pressure: {weather.pressure} </p>\r\n            <p> Humidity: {weather.humidity} %</p>\r\n            <p> Precipitation: {weather.rain} mm</p>\r\n            <p> Wind Speed: {weather.wind_speed} m/s</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DayForecast;","import React from 'react'\r\nimport './notLocated.css'\r\n\r\nfunction NotLocated() {\r\n    return(\r\n        <div id=\"not-locate\">\r\n            <img className=\"weather-icon\" src=\"https://openweathermap.org/img/wn/04d.png\" alt=\"weather-icon\" />\r\n            <p className=\"alert\">CHECK THE GEOLOCATION OF YOUR BROWSER</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NotLocated;","import React, {useState, useEffect} from 'react';\r\nimport { Chart } from \"react-google-charts\";\r\nimport CurrentWeather from '../components/currentWeather';\r\nimport DayForecast from '../components/dailyForecast';\r\nimport NotLocated from '../components/notLocated'\r\nimport ReactHover, { Trigger, Hover } from 'react-hover'\r\nimport './weather.css'\r\n\r\nfunction Weather() {\r\n    const [currentWeather, setcurrentWeather] = useState({ \r\n        lat: \"\", lon: \"\", current: {}, weather: {}\r\n    });\r\n    const [hourly, setHourly] = useState([]);\r\n    const [daily, setDaily] = useState([]);\r\n    const [isLocated, setLocated] = useState(false);\r\n\r\n    async function getCurrentPositionWeather(lat, long) {\r\n        let data = await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${long}&units=metric&appid=${process.env.REACT_APP_API_KEY}`)        \r\n        let res = await data.json();\r\n        setcurrentWeather({\r\n            ...currentWeather, lat: res.lat, lon: res.lon, current: res.current, weather: res.current.weather[0]\r\n        });\r\n        setLocated(true);\r\n\r\n        let {hourly} = res;\r\n        setHourly(hourly);\r\n\r\n        let {daily} = res;\r\n        setDaily(daily);\r\n    }\r\n    \r\n    useEffect(() => {\r\n        if (\"geolocation\" in navigator) \r\n        {  \r\n            navigator.geolocation.getCurrentPosition(function(position) {\r\n                let lat = position.coords.latitude;\r\n                let long = position.coords.longitude;\r\n                getCurrentPositionWeather(lat,long);\r\n            });\r\n        }\r\n        else\r\n            console.log(\"not found\")\r\n    }, [])\r\n\r\n    const hourlyChart = (dataset) => {\r\n        let chart = null;\r\n        let data = [];   // Format [day, infections, deaths, recovered]\r\n        data.push([{type: 'date', label: 'Date'}, 'Temperature', 'Probability of Precipitation']);\r\n        let currentTime = new Date();\r\n        for (let i = 0; i < dataset.length; i++) {\r\n            let time=new Date();\r\n            time.setHours(currentTime.getHours() + i);\r\n            data.push([time, dataset[i].temp, dataset[i].pop * 100]);\r\n        }\r\n        chart = <Chart\r\n            width={\"100%\"}\r\n            height={\"100%\"}\r\n            chartType=\"Line\"\r\n            data={data}\r\n            options={{\r\n                series: {\r\n                    // Gives each series an axis name that matches the Y-axis below.\r\n                    0: { axis: 'Temps' },\r\n                    1: { axis: 'Daylight' },\r\n                    },\r\n                axes: {\r\n                    // Adds labels to each axis; they don't have to match the axis names.\r\n                    y: {\r\n                        Temps: { label: 'Temps (Celsius)' },\r\n                        Daylight: { label: 'Chance of Rain (%)' },\r\n                    },\r\n                },\r\n            }}\r\n            rootProps={{ 'data-testid': '1' }}\r\n        />\r\n        return chart;\r\n      }\r\n\r\n    const optionsCursorTrueWithMargin = {\r\n        followCursor: true,\r\n        shiftX: 30,\r\n        shiftY: -90\r\n    }\r\n    const renderForecast = (dataset) => {\r\n        let forecasts = [];\r\n        let date = new Date();\r\n        for (let i = 0; i < dataset.length; i++) {\r\n                let dayForecast = (\r\n                    <ReactHover options={optionsCursorTrueWithMargin}>\r\n                        <Trigger type='trigger'>\r\n                            <div className=\"react-trigger\">\r\n                                <p>{JSON.stringify(date).substring(1, 11)}</p>\r\n                                <img id=\"weather-icon\" src={\"http://openweathermap.org/img/w/\" + dataset[i].weather[0].icon + \".png\"}  alt=\"weatherForecast-icon\" />\r\n                                <p> {dataset[i].weather[0].description} </p>\r\n                            </div>\r\n                        </Trigger>\r\n                        <Hover type='hover'>\r\n                            <DayForecast weather={dataset[i]} time={JSON.stringify(date)} />\r\n                        </Hover>\r\n                    </ReactHover>\r\n                )\r\n                date.setDate(date.getDate() + 1);\r\n                forecasts.push(dayForecast);\r\n        }\r\n        forecasts.shift();\r\n        return forecasts;\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            {isLocated ?\r\n                <div id=\"weather-page\">\r\n                    <h1>Weather forecast</h1>\r\n                    <div className=\"current\">\r\n                        <CurrentWeather weather={currentWeather} />\r\n                    </div>\r\n                    <hr></hr>\r\n\r\n                    <div className=\"hourly-daily\">\r\n                        <div id=\"hourly-chart\">\r\n                            { hourlyChart(hourly) }\r\n                        </div>\r\n                        <div id=\"forecast\">\r\n                            { renderForecast(daily) }\r\n                        </div>\r\n                    </div>\r\n                </div> : \r\n                <div>\r\n                    <NotLocated />\r\n                </div> \r\n            } \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Weather;","import React from 'react';\nimport './App.css';\nimport WeatherPage from './pages/weather';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <WeatherPage />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nrequire('dotenv').config()\n\nReactDOM.render(\n    <App />,  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}